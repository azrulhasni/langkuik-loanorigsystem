import {
  ElementMixin,
  vaadin_themable_mixin_exports
} from "./chunk-VM7WIMYX.js";
import {
  __reExport
} from "./chunk-KKNQZGBY.js";

// node_modules/@vaadin-component-factory/vcf-popup/theme/lumo/vcf-popup-styles.js
import "@vaadin/vaadin-lumo-styles/spacing";
import "@vaadin/vaadin-lumo-styles/style";
var popupTheme = document.createElement("dom-module");
popupTheme.id = "vcf-popup-lumo";
popupTheme.setAttribute("theme-for", "vcf-popup");
popupTheme.innerHTML = `
    <template>
      <style>
        :host([phone]) {
          top: 0 !important;
          right: 0 !important;
          bottom: var(--vaadin-overlay-viewport-bottom, 0) !important;
          left: 0 !important;
          align-items: stretch !important;
          justify-content: flex-end !important;
        }

        :host([phone]) [part="overlay"] {
          max-height: 50vh;
          width: 100vw;
          border-radius: 0;
          box-shadow: var(--lumo-box-shadow-xl);
        }

        /* The content part scrolls instead of the overlay part, because of the gradient fade-out */

        :host([phone]) [part="content"] {
          padding: 30px var(--lumo-space-m);
          max-height: inherit;
          box-sizing: border-box;
          -webkit-overflow-scrolling: touch;
          overflow: auto;
          -webkit-mask-image: linear-gradient(transparent, #000 40px, #000 calc(100% - 40px), transparent);
          mask-image: linear-gradient(transparent, #000 40px, #000 calc(100% - 40px), transparent);
        }

        :host([phone]) [part="backdrop"] {
          display: block;
        }

        /* Animations */

        :host([opening][phone]) [part="overlay"] {
          animation: 0.2s lumo-mobile-menu-overlay-enter cubic-bezier(.215, .61, .355, 1) both;
        }

        :host([closing][phone]),
        :host([closing][phone]) [part="backdrop"] {
          animation-delay: 0.14s;
        }

        :host([closing][phone]) [part="overlay"] {
          animation: 0.14s 0.14s lumo-mobile-menu-overlay-exit cubic-bezier(.55, .055, .675, .19) both;
        }
      </style>
    </template>
  `;
popupTheme.register(popupTheme.id);
var overlayTheme = document.createElement("dom-module");
overlayTheme.id = "vcf-vaadin-overlay-lumo";
overlayTheme.setAttribute("theme-for", "vcf-popup-overlay");
overlayTheme.innerHTML = `
    <template>
      <style>
				:host {
					align-items: flex-start;
					justify-content: flex-start;
					right: auto;
					position: absolute;
					bottom: auto;
				}

				[part="content"] {
					padding: 0;
				}
      </style>
    </template>
  `;
overlayTheme.register(overlayTheme.id);

// node_modules/@vaadin-component-factory/vcf-popup/src/vcf-popup.js
import { html, PolymerElement } from "@polymer/polymer/polymer-element";
import { OverlayElement } from "@vaadin/vaadin-overlay/src/vaadin-overlay.js";

// external:@vaadin/vaadin-overlay
var vaadin_overlay_exports = {};
__reExport(vaadin_overlay_exports, vaadin_overlay_star);
import * as vaadin_overlay_star from "@vaadin/vaadin-overlay";

// external:@polymer/iron-media-query
var iron_media_query_exports = {};
__reExport(iron_media_query_exports, iron_media_query_star);
import * as iron_media_query_star from "@polymer/iron-media-query";

// node_modules/@vaadin-component-factory/vcf-popup/src/vcf-popup.js
var PopupOverlayElement = class extends OverlayElement {
  static get is() {
    return "vcf-popup-overlay";
  }
};
customElements.define(PopupOverlayElement.is, PopupOverlayElement);
var VcfPopup = class extends ElementMixin((0, vaadin_themable_mixin_exports.ThemableMixin)(PolymerElement)) {
  static get template() {
    return html`
      <style>
        :host {
          display: block;
        }
      </style>

      <vcf-popup-overlay id="popupOverlay" opened="{{opened}}" theme$="[[theme]]" with-backdrop="[[_phone]]" phone$="[[_phone]]"> </vcf-popup-overlay>

      <iron-media-query query="[[_phoneMediaQuery]]" query-matches="{{_phone}}"> </iron-media-query>
    `;
  }
  static get is() {
    return "vcf-popup";
  }
  static get version() {
    return "1.2.6";
  }
  static get properties() {
    return {
      opened: {
        type: Boolean,
        value: false,
        reflectToAttribute: true
      },
      for: {
        type: String
      },
      closeOnClick: {
        type: Boolean,
        value: false,
        reflectToAttribute: true
      },
      _targetElement: {
        type: Object
      },
      _phone: Boolean,
      _phoneMediaQuery: {
        value: "(max-width: 420px), (max-height: 420px)"
      }
    };
  }
  static _finalizeClass() {
    super._finalizeClass();
  }
  static get observers() {
    return ["_attachToTarget(for)"];
  }
  constructor() {
    super();
    this._boundShow = this.show.bind(this);
    this._boundHide = this.hide.bind(this);
  }
  ready() {
    super.ready();
    this.$.popupOverlay.template = this.querySelector("template");
    this.$.popupOverlay.addEventListener("vaadin-overlay-open", () => this._popupOpenChanged(true));
    this.$.popupOverlay.addEventListener("vaadin-overlay-close", () => this._popupOpenChanged(false));
    if (this.closeOnClick) {
      this.$.popupOverlay.addEventListener("click", this._boundHide);
    }
  }
  connectedCallback() {
    if (!this._targetElement) {
      this._targetElement = this.parentNode.querySelector(`#${this.for}`);
    }
    this._attachToTarget();
    super.connectedCallback();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this._detachFromTarget();
    if (this.closeOnClick) {
      this.$.popupOverlay.removeEventListener("click", this._boundHide);
    }
  }
  show() {
    this.opened = true;
    this._setPosition();
  }
  hide() {
    this.opened = false;
  }
  _attachToTarget() {
    if (!this._targetElement) {
      return;
    }
    this._targetElement.addEventListener("click", this._boundShow);
  }
  _detachFromTarget() {
    this._targetElement.removeEventListener("click", this._boundShow);
  }
  _setPosition() {
    const targetBoundingRect = this._targetElement.getBoundingClientRect();
    const overlayRect = this.$.popupOverlay.getBoundingClientRect();
    const positionLeft = targetBoundingRect.left;
    const positionTop = targetBoundingRect.top + targetBoundingRect.height + window.pageYOffset;
    if (positionLeft + overlayRect.width > window.innerWidth) {
      this.$.popupOverlay.style.right = "0px";
      this.$.popupOverlay.style.left = "auto";
    } else {
      this.$.popupOverlay.style.left = `${Math.max(0, positionLeft)}px`;
      this.$.popupOverlay.style.right = "auto";
    }
    if (positionTop + overlayRect.height > window.innerHeight + window.pageYOffset) {
      this.$.popupOverlay.style.top = `${positionTop - targetBoundingRect.height - overlayRect.height}px`;
    } else {
      this.$.popupOverlay.style.top = `${positionTop}px`;
    }
  }
  _popupOpenChanged(isOpened) {
    if (isOpened) {
      window.addEventListener("scroll", this._boundSetPosition, true);
    } else {
      window.removeEventListener("scroll", this._boundSetPosition, true);
    }
    this.dispatchEvent(new CustomEvent("popup-open-changed", {
      detail: {
        opened: isOpened
      }
    }));
  }
};
customElements.define(VcfPopup.is, VcfPopup);
window.Vaadin.VcfPopup = VcfPopup;
//# sourceMappingURL=@vaadin-component-factory_vcf-popup_theme_lumo_vcf-popup__js.js.map
