{
  "version": 3,
  "sources": ["../../@polymer/iron-resizable-behavior/iron-resizable-behavior.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {useShadow} from '@polymer/polymer/lib/utils/settings.js';\n\n// Contains all connected resizables that do not have a parent.\nvar ORPHANS = new Set();\n\n/**\n * `IronResizableBehavior` is a behavior that can be used in Polymer elements to\n * coordinate the flow of resize events between \"resizers\" (elements that\n *control the size or hidden state of their children) and \"resizables\" (elements\n *that need to be notified when they are resized or un-hidden by their parents\n *in order to take action on their new measurements).\n *\n * Elements that perform measurement should add the `IronResizableBehavior`\n *behavior to their element definition and listen for the `iron-resize` event on\n *themselves. This event will be fired when they become showing after having\n *been hidden, when they are resized explicitly by another resizable, or when\n *the window has been resized.\n *\n * Note, the `iron-resize` event is non-bubbling.\n *\n * @polymerBehavior\n * @demo demo/index.html\n **/\nexport const IronResizableBehavior = {\n  properties: {\n    /**\n     * The closest ancestor element that implements `IronResizableBehavior`.\n     */\n    _parentResizable: {\n      type: Object,\n      observer: '_parentResizableChanged',\n    },\n\n    /**\n     * True if this element is currently notifying its descendant elements of\n     * resize.\n     */\n    _notifyingDescendant: {\n      type: Boolean,\n      value: false,\n    }\n  },\n\n  listeners: {\n    'iron-request-resize-notifications': '_onIronRequestResizeNotifications'\n  },\n\n  created: function() {\n    // We don't really need property effects on these, and also we want them\n    // to be created before the `_parentResizable` observer fires:\n    this._interestedResizables = [];\n    this._boundNotifyResize = this.notifyResize.bind(this);\n    this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);\n  },\n\n  attached: function() {\n    this._requestResizeNotifications();\n  },\n\n  detached: function() {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    } else {\n      ORPHANS.delete(this);\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n\n    this._parentResizable = null;\n  },\n\n  /**\n   * Can be called to manually notify a resizable and its descendant\n   * resizables of a resize change.\n   */\n  notifyResize: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._interestedResizables.forEach(function(resizable) {\n      if (this.resizerShouldNotify(resizable)) {\n        this._notifyDescendant(resizable);\n      }\n    }, this);\n\n    this._fireResize();\n  },\n\n  /**\n   * Used to assign the closest resizable ancestor to this resizable\n   * if the ancestor detects a request for notifications.\n   */\n  assignParentResizable: function(parentResizable) {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    }\n\n    this._parentResizable = parentResizable;\n\n    if (parentResizable &&\n        parentResizable._interestedResizables.indexOf(this) === -1) {\n      parentResizable._interestedResizables.push(this);\n      parentResizable._subscribeIronResize(this);\n    }\n  },\n\n  /**\n   * Used to remove a resizable descendant from the list of descendants\n   * that should be notified of a resize change.\n   */\n  stopResizeNotificationsFor: function(target) {\n    var index = this._interestedResizables.indexOf(target);\n\n    if (index > -1) {\n      this._interestedResizables.splice(index, 1);\n      this._unsubscribeIronResize(target);\n    }\n  },\n\n  /**\n   * Subscribe this element to listen to iron-resize events on the given target.\n   *\n   * Preferred over target.listen because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _subscribeIronResize: function(target) {\n    target.addEventListener('iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * Unsubscribe this element from listening to to iron-resize events on the\n   * given target.\n   *\n   * Preferred over target.unlisten because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _unsubscribeIronResize: function(target) {\n    target.removeEventListener(\n        'iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * This method can be overridden to filter nested elements that should or\n   * should not be notified by the current element. Return true if an element\n   * should be notified, or false if it should not be notified.\n   *\n   * @param {HTMLElement} element A candidate descendant element that\n   * implements `IronResizableBehavior`.\n   * @return {boolean} True if the `element` should be notified of resize.\n   */\n  resizerShouldNotify: function(element) {\n    return true;\n  },\n\n  _onDescendantIronResize: function(event) {\n    if (this._notifyingDescendant) {\n      event.stopPropagation();\n      return;\n    }\n\n    // no need to use this during shadow dom because of event retargeting\n    if (!useShadow) {\n      this._fireResize();\n    }\n  },\n\n  _fireResize: function() {\n    this.fire('iron-resize', null, {node: this, bubbles: false});\n  },\n\n  _onIronRequestResizeNotifications: function(event) {\n    var target = /** @type {!EventTarget} */ (dom(event).rootTarget);\n    if (target === this) {\n      return;\n    }\n\n    target.assignParentResizable(this);\n    this._notifyDescendant(target);\n\n    event.stopPropagation();\n  },\n\n  _parentResizableChanged: function(parentResizable) {\n    if (parentResizable) {\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n  },\n\n  _notifyDescendant: function(descendant) {\n    // NOTE(cdata): In IE10, attached is fired on children first, so it's\n    // important not to notify them if the parent is not attached yet (or\n    // else they will get redundantly notified when the parent attaches).\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._notifyingDescendant = true;\n    descendant.notifyResize();\n    this._notifyingDescendant = false;\n  },\n\n  _requestResizeNotifications: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (document.readyState === 'loading') {\n      var _requestResizeNotifications =\n          this._requestResizeNotifications.bind(this);\n      document.addEventListener(\n          'readystatechange', function readystatechanged() {\n            document.removeEventListener('readystatechange', readystatechanged);\n            _requestResizeNotifications();\n          });\n    } else {\n      this._findParent();\n\n      if (!this._parentResizable) {\n        // If this resizable is an orphan, tell other orphans to try to find\n        // their parent again, in case it's this resizable.\n        ORPHANS.forEach(function(orphan) {\n          if (orphan !== this) {\n            orphan._findParent();\n          }\n        }, this);\n\n        window.addEventListener('resize', this._boundNotifyResize);\n        this.notifyResize();\n      } else {\n        // If this resizable has a parent, tell other child resizables of\n        // that parent to try finding their parent again, in case it's this\n        // resizable.\n        this._parentResizable._interestedResizables\n            .forEach(function(resizable) {\n              if (resizable !== this) {\n                resizable._findParent();\n              }\n            }, this);\n      }\n    }\n  },\n\n  _findParent: function() {\n    this.assignParentResizable(null);\n    this.fire(\n        'iron-request-resize-notifications',\n        null,\n        {node: this, bubbles: true, cancelable: true});\n\n    if (!this._parentResizable) {\n      ORPHANS.add(this);\n    } else {\n      ORPHANS.delete(this);\n    }\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
