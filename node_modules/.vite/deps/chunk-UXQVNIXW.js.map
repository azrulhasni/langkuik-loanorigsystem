{
  "version": 3,
  "sources": ["../../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n * Chrome uses an older version of DOM Level 3 Keyboard Events\n *\n * Most keys are labeled as text, but some are Unicode codepoints.\n * Values taken from:\n * http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/keyset.html#KeySet-Set\n */\nvar KEY_IDENTIFIER = {\n  'U+0008': 'backspace',\n  'U+0009': 'tab',\n  'U+001B': 'esc',\n  'U+0020': 'space',\n  'U+007F': 'del'\n};\n\n/**\n * Special table for KeyboardEvent.keyCode.\n * KeyboardEvent.keyIdentifier is better, and KeyBoardEvent.key is even better\n * than that.\n *\n * Values from:\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.keyCode#Value_of_keyCode\n */\nvar KEY_CODE = {\n  8: 'backspace',\n  9: 'tab',\n  13: 'enter',\n  27: 'esc',\n  33: 'pageup',\n  34: 'pagedown',\n  35: 'end',\n  36: 'home',\n  32: 'space',\n  37: 'left',\n  38: 'up',\n  39: 'right',\n  40: 'down',\n  46: 'del',\n  106: '*'\n};\n\n/**\n * MODIFIER_KEYS maps the short name for modifier keys used in a key\n * combo string to the property name that references those same keys\n * in a KeyboardEvent instance.\n */\nvar MODIFIER_KEYS = {\n  'shift': 'shiftKey',\n  'ctrl': 'ctrlKey',\n  'alt': 'altKey',\n  'meta': 'metaKey'\n};\n\n/**\n * KeyboardEvent.key is mostly represented by printable character made by\n * the keyboard, with unprintable keys labeled nicely.\n *\n * However, on OS X, Alt+char can make a Unicode character that follows an\n * Apple-specific mapping. In this case, we fall back to .keyCode.\n */\nvar KEY_CHAR = /[a-z0-9*]/;\n\n/**\n * Matches a keyIdentifier string.\n */\nvar IDENT_CHAR = /U\\+/;\n\n/**\n * Matches arrow keys in Gecko 27.0+\n */\nvar ARROW_KEY = /^arrow/;\n\n/**\n * Matches space keys everywhere (notably including IE10's exceptional name\n * `spacebar`).\n */\nvar SPACE_KEY = /^space(bar)?/;\n\n/**\n * Matches ESC key.\n *\n * Value from: http://w3c.github.io/uievents-key/#key-Escape\n */\nvar ESC_KEY = /^escape$/;\n\n/**\n * Transforms the key.\n * @param {string} key The KeyBoardEvent.key\n * @param {Boolean} [noSpecialChars] Limits the transformation to\n * alpha-numeric characters.\n */\nfunction transformKey(key, noSpecialChars) {\n  var validKey = '';\n  if (key) {\n    var lKey = key.toLowerCase();\n    if (lKey === ' ' || SPACE_KEY.test(lKey)) {\n      validKey = 'space';\n    } else if (ESC_KEY.test(lKey)) {\n      validKey = 'esc';\n    } else if (lKey.length == 1) {\n      if (!noSpecialChars || KEY_CHAR.test(lKey)) {\n        validKey = lKey;\n      }\n    } else if (ARROW_KEY.test(lKey)) {\n      validKey = lKey.replace('arrow', '');\n    } else if (lKey == 'multiply') {\n      // numpad '*' can map to Multiply on IE/Windows\n      validKey = '*';\n    } else {\n      validKey = lKey;\n    }\n  }\n  return validKey;\n}\n\nfunction transformKeyIdentifier(keyIdent) {\n  var validKey = '';\n  if (keyIdent) {\n    if (keyIdent in KEY_IDENTIFIER) {\n      validKey = KEY_IDENTIFIER[keyIdent];\n    } else if (IDENT_CHAR.test(keyIdent)) {\n      keyIdent = parseInt(keyIdent.replace('U+', '0x'), 16);\n      validKey = String.fromCharCode(keyIdent).toLowerCase();\n    } else {\n      validKey = keyIdent.toLowerCase();\n    }\n  }\n  return validKey;\n}\n\nfunction transformKeyCode(keyCode) {\n  var validKey = '';\n  if (Number(keyCode)) {\n    if (keyCode >= 65 && keyCode <= 90) {\n      // ascii a-z\n      // lowercase is 32 offset from uppercase\n      validKey = String.fromCharCode(32 + keyCode);\n    } else if (keyCode >= 112 && keyCode <= 123) {\n      // function keys f1-f12\n      validKey = 'f' + (keyCode - 112 + 1);\n    } else if (keyCode >= 48 && keyCode <= 57) {\n      // top 0-9 keys\n      validKey = String(keyCode - 48);\n    } else if (keyCode >= 96 && keyCode <= 105) {\n      // num pad 0-9\n      validKey = String(keyCode - 96);\n    } else {\n      validKey = KEY_CODE[keyCode];\n    }\n  }\n  return validKey;\n}\n\n/**\n * Calculates the normalized key for a KeyboardEvent.\n * @param {KeyboardEvent} keyEvent\n * @param {Boolean} [noSpecialChars] Set to true to limit keyEvent.key\n * transformation to alpha-numeric chars. This is useful with key\n * combinations like shift + 2, which on FF for MacOS produces\n * keyEvent.key = @\n * To get 2 returned, set noSpecialChars = true\n * To get @ returned, set noSpecialChars = false\n */\nfunction normalizedKeyForEvent(keyEvent, noSpecialChars) {\n  // Fall back from .key, to .detail.key for artifical keyboard events,\n  // and then to deprecated .keyIdentifier and .keyCode.\n  if (keyEvent.key) {\n    return transformKey(keyEvent.key, noSpecialChars);\n  }\n  if (keyEvent.detail && keyEvent.detail.key) {\n    return transformKey(keyEvent.detail.key, noSpecialChars);\n  }\n  return transformKeyIdentifier(keyEvent.keyIdentifier) ||\n      transformKeyCode(keyEvent.keyCode) || '';\n}\n\nfunction keyComboMatchesEvent(keyCombo, event) {\n  // For combos with modifiers we support only alpha-numeric keys\n  var keyEvent = normalizedKeyForEvent(event, keyCombo.hasModifiers);\n  return keyEvent === keyCombo.key &&\n      (!keyCombo.hasModifiers ||\n       (!!event.shiftKey === !!keyCombo.shiftKey &&\n        !!event.ctrlKey === !!keyCombo.ctrlKey &&\n        !!event.altKey === !!keyCombo.altKey &&\n        !!event.metaKey === !!keyCombo.metaKey));\n}\n\nfunction parseKeyComboString(keyComboString) {\n  if (keyComboString.length === 1) {\n    return {combo: keyComboString, key: keyComboString, event: 'keydown'};\n  }\n  return keyComboString.split('+')\n      .reduce(function(parsedKeyCombo, keyComboPart) {\n        var eventParts = keyComboPart.split(':');\n        var keyName = eventParts[0];\n        var event = eventParts[1];\n\n        if (keyName in MODIFIER_KEYS) {\n          parsedKeyCombo[MODIFIER_KEYS[keyName]] = true;\n          parsedKeyCombo.hasModifiers = true;\n        } else {\n          parsedKeyCombo.key = keyName;\n          parsedKeyCombo.event = event || 'keydown';\n        }\n\n        return parsedKeyCombo;\n      }, {combo: keyComboString.split(':').shift()});\n}\n\nfunction parseEventString(eventString) {\n  return eventString.trim().split(' ').map(function(keyComboString) {\n    return parseKeyComboString(keyComboString);\n  });\n}\n\n/**\n * `Polymer.IronA11yKeysBehavior` provides a normalized interface for processing\n * keyboard commands that pertain to [WAI-ARIA best\n * practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). The\n * element takes care of browser differences with respect to Keyboard events and\n * uses an expressive syntax to filter key presses.\n *\n * Use the `keyBindings` prototype property to express what combination of keys\n * will trigger the callback. A key binding has the format\n * `\"KEY+MODIFIER:EVENT\": \"callback\"` (`\"KEY\": \"callback\"` or\n * `\"KEY:EVENT\": \"callback\"` are valid as well). Some examples:\n *\n *      keyBindings: {\n *        'space': '_onKeydown', // same as 'space:keydown'\n *        'shift+tab': '_onKeydown',\n *        'enter:keypress': '_onKeypress',\n *        'esc:keyup': '_onKeyup'\n *      }\n *\n * The callback will receive with an event containing the following information\n * in `event.detail`:\n *\n *      _onKeydown: function(event) {\n *        console.log(event.detail.combo); // KEY+MODIFIER, e.g. \"shift+tab\"\n *        console.log(event.detail.key); // KEY only, e.g. \"tab\"\n *        console.log(event.detail.event); // EVENT, e.g. \"keydown\"\n *        console.log(event.detail.keyboardEvent); // the original KeyboardEvent\n *      }\n *\n * Use the `keyEventTarget` attribute to set up event handlers on a specific\n * node.\n *\n * See the [demo source\n * code](https://github.com/PolymerElements/iron-a11y-keys-behavior/blob/master/demo/x-key-aware.html)\n * for an example.\n *\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronA11yKeysBehavior = {\n  properties: {\n    /**\n     * The EventTarget that will be firing relevant KeyboardEvents. Set it to\n     * `null` to disable the listeners.\n     * @type {?EventTarget}\n     */\n    keyEventTarget: {\n      type: Object,\n      value: function() {\n        return this;\n      }\n    },\n\n    /**\n     * If true, this property will cause the implementing element to\n     * automatically stop propagation on any handled KeyboardEvents.\n     */\n    stopKeyboardEventPropagation: {type: Boolean, value: false},\n\n    _boundKeyHandlers: {\n      type: Array,\n      value: function() {\n        return [];\n      }\n    },\n\n    // We use this due to a limitation in IE10 where instances will have\n    // own properties of everything on the \"prototype\".\n    _imperativeKeyBindings: {\n      type: Object,\n      value: function() {\n        return {};\n      }\n    }\n  },\n\n  observers: ['_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)'],\n\n\n  /**\n   * To be used to express what combination of keys  will trigger the relative\n   * callback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`\n   * @type {!Object}\n   */\n  keyBindings: {},\n\n  registered: function() {\n    this._prepKeyBindings();\n  },\n\n  attached: function() {\n    this._listenKeyEventListeners();\n  },\n\n  detached: function() {\n    this._unlistenKeyEventListeners();\n  },\n\n  /**\n   * Can be used to imperatively add a key binding to the implementing\n   * element. This is the imperative equivalent of declaring a keybinding\n   * in the `keyBindings` prototype property.\n   *\n   * @param {string} eventString\n   * @param {string} handlerName\n   */\n  addOwnKeyBinding: function(eventString, handlerName) {\n    this._imperativeKeyBindings[eventString] = handlerName;\n    this._prepKeyBindings();\n    this._resetKeyEventListeners();\n  },\n\n  /**\n   * When called, will remove all imperatively-added key bindings.\n   */\n  removeOwnKeyBindings: function() {\n    this._imperativeKeyBindings = {};\n    this._prepKeyBindings();\n    this._resetKeyEventListeners();\n  },\n\n  /**\n   * Returns true if a keyboard event matches `eventString`.\n   *\n   * @param {KeyboardEvent} event\n   * @param {string} eventString\n   * @return {boolean}\n   */\n  keyboardEventMatchesKeys: function(event, eventString) {\n    var keyCombos = parseEventString(eventString);\n    for (var i = 0; i < keyCombos.length; ++i) {\n      if (keyComboMatchesEvent(keyCombos[i], event)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  _collectKeyBindings: function() {\n    var keyBindings = this.behaviors.map(function(behavior) {\n      return behavior.keyBindings;\n    });\n\n    if (keyBindings.indexOf(this.keyBindings) === -1) {\n      keyBindings.push(this.keyBindings);\n    }\n\n    return keyBindings;\n  },\n\n  _prepKeyBindings: function() {\n    this._keyBindings = {};\n\n    this._collectKeyBindings().forEach(function(keyBindings) {\n      for (var eventString in keyBindings) {\n        this._addKeyBinding(eventString, keyBindings[eventString]);\n      }\n    }, this);\n\n    for (var eventString in this._imperativeKeyBindings) {\n      this._addKeyBinding(\n          eventString, this._imperativeKeyBindings[eventString]);\n    }\n\n    // Give precedence to combos with modifiers to be checked first.\n    for (var eventName in this._keyBindings) {\n      this._keyBindings[eventName].sort(function(kb1, kb2) {\n        var b1 = kb1[0].hasModifiers;\n        var b2 = kb2[0].hasModifiers;\n        return (b1 === b2) ? 0 : b1 ? -1 : 1;\n      })\n    }\n  },\n\n  _addKeyBinding: function(eventString, handlerName) {\n    parseEventString(eventString).forEach(function(keyCombo) {\n      this._keyBindings[keyCombo.event] =\n          this._keyBindings[keyCombo.event] || [];\n\n      this._keyBindings[keyCombo.event].push([keyCombo, handlerName]);\n    }, this);\n  },\n\n  _resetKeyEventListeners: function() {\n    this._unlistenKeyEventListeners();\n\n    if (this.isAttached) {\n      this._listenKeyEventListeners();\n    }\n  },\n\n  _listenKeyEventListeners: function() {\n    if (!this.keyEventTarget) {\n      return;\n    }\n    Object.keys(this._keyBindings).forEach(function(eventName) {\n      var keyBindings = this._keyBindings[eventName];\n      var boundKeyHandler = this._onKeyBindingEvent.bind(this, keyBindings);\n\n      this._boundKeyHandlers.push(\n          [this.keyEventTarget, eventName, boundKeyHandler]);\n\n      this.keyEventTarget.addEventListener(eventName, boundKeyHandler);\n    }, this);\n  },\n\n  _unlistenKeyEventListeners: function() {\n    var keyHandlerTuple;\n    var keyEventTarget;\n    var eventName;\n    var boundKeyHandler;\n\n    while (this._boundKeyHandlers.length) {\n      // My kingdom for block-scope binding and destructuring assignment..\n      keyHandlerTuple = this._boundKeyHandlers.pop();\n      keyEventTarget = keyHandlerTuple[0];\n      eventName = keyHandlerTuple[1];\n      boundKeyHandler = keyHandlerTuple[2];\n\n      keyEventTarget.removeEventListener(eventName, boundKeyHandler);\n    }\n  },\n\n  _onKeyBindingEvent: function(keyBindings, event) {\n    if (this.stopKeyboardEventPropagation) {\n      event.stopPropagation();\n    }\n\n    // if event has been already prevented, don't do anything\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    for (var i = 0; i < keyBindings.length; i++) {\n      var keyCombo = keyBindings[i][0];\n      var handlerName = keyBindings[i][1];\n      if (keyComboMatchesEvent(keyCombo, event)) {\n        this._triggerKeyHandler(keyCombo, handlerName, event);\n        // exit the loop if eventDefault was prevented\n        if (event.defaultPrevented) {\n          return;\n        }\n      }\n    }\n  },\n\n  _triggerKeyHandler: function(keyCombo, handlerName, keyboardEvent) {\n    var detail = Object.create(keyCombo);\n    detail.keyboardEvent = keyboardEvent;\n    var event =\n        new CustomEvent(keyCombo.event, {detail: detail, cancelable: true});\n    this[handlerName].call(this, event);\n    if (event.defaultPrevented) {\n      keyboardEvent.preventDefault();\n    }\n  }\n};\n"],
  "mappings": "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",
  "names": ["eventString"]
}
